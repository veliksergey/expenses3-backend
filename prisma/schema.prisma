// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Guide. Check if column should be:
// optional/nullable
// unique

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// type
model Type {
  id          Int                 @id @default(autoincrement())
  name        String              @unique @db.VarChar(100)
  description String?             @db.Text()
  tags        String[]
  records     Record[]
  categories  CategoriesOnTypes[]
}

// category
model Category {
  id          Int                 @id @default(autoincrement())
  name        String              @unique @db.VarChar(100)
  description String?             @db.Text()
  tags        String[]
  records     Record[]
  types       CategoriesOnTypes[]
}

// bank
model Account {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text()
  tags        String[]
  records     Record[]
}

// vendor
model Vendor {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(100)
  description String?    @db.Text()
  tags        String[]
  records     Record[]
  notes       Note[]
  documents   Document[]
}

// status
model Status {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text()
  tags        String[]
  records     Record[]
}

// project
model Project {
  id          Int                  @id @default(autoincrement())
  shortName   String?              @unique @db.VarChar(15)
  name        String               @unique @db.VarChar(100)
  description String?              @db.Text()
  tags        String[]
  records     Record[]
  partners    ProjectsOnPartners[]
  notes       Note[]
  documents   Document[]
}

// condition
model Condition {
  id          Int                   @id @default(autoincrement())
  name        String                @unique @db.VarChar(100)
  description String                @db.VarChar(500)
  tags        String[]
  records     RecordsOnConditions[]
}

// record
model Record {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(100)
  description       String?   @db.Text()
  amountPlanned     Decimal?  @db.Decimal(10, 2)
  amountActual      Decimal?  @db.Decimal(10, 2)
  amountRelated     Decimal?  @db.Decimal(10, 2)
  startDatePlanned  DateTime?
  startDateActual   DateTime?
  finishDatePlanned DateTime?
  finishDateActual  DateTime?
  relatedDate       DateTime?

  type       Type?     @relation(fields: [typeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  typeId     Int?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  categoryId Int?
  account    Account?  @relation(fields: [accountId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  accountId  Int?
  vendor     Vendor?   @relation(fields: [vendorId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  vendorId   Int?
  user       User?     @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  userId     Int?
  status     Status?   @relation(fields: [statusId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  statusId   Int?
  project    Project?  @relation(fields: [projectId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  projectId  Int?

  notes      Note[]
  documents  Document[]
  conditions RecordsOnConditions[]

  parent        Record?  @relation("ParentChildren", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  parentId      Int?
  children      Record[] @relation("ParentChildren")
  parents       String?  @db.Text()
  childrenCount Int      @default(0)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([typeId])
  @@index([categoryId])
  @@index([accountId])
  @@index([vendorId])
  @@index([userId])
  @@index([statusId])
  @@index([projectId])
  @@index([parentId])
}

// partner
model Partner {
  id          Int                  @id @default(autoincrement())
  name        String               @unique @db.VarChar(100)
  description String?              @db.Text()
  tags        String[]
  records     ProjectsOnPartners[]
  notes       Note[]
  documents   Document[]
}

// user
model User {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(100)
  username  String?    @db.VarChar(100)
  password  String?    @db.VarChar(200)
  tags      String[]
  records   Record[]
  notes     Note[]
  documents Document[]
}

// categories types rel
model CategoriesOnTypes {
  type       Type     @relation(fields: [typeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  typeId     Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  categoryId Int
  active     Boolean  @default(true)
  order      Int?

  @@id([typeId, categoryId])
}

// projects partners rel
model ProjectsOnPartners {
  partner     Partner @relation(fields: [partnerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  partnerId   Int
  project     Project @relation(fields: [projectId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  projectId   Int
  percentage  Decimal @db.Decimal(10, 2)
  name        String? @db.VarChar(100)
  description String?

  @@id([partnerId, projectId])
}

// records conditions rel
model RecordsOnConditions {
  condition   Condition @relation(fields: [conditionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  conditionId Int
  record      Record    @relation(fields: [recordId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  recordId    Int
  value       Boolean   @default(false)

  @@id([conditionId, recordId])
}

// notes
model Note {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String    @db.Text
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  record    Record?  @relation(fields: [recordId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  recordId  Int?
  vendor    Vendor?  @relation(fields: [vendorId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  vendorId  Int?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  projectId Int?
  partner   Partner? @relation(fields: [partnerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  partnerId Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  userId    Int?

  @@index([recordId])
  @@index([vendorId])
  @@index([projectId])
  @@index([partnerId])
  @@index([userId])
}

// documents
model Document {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String?   @db.VarChar(500)
  path        String    @db.Text
  createdAt   DateTime? @default(now())

  record    Record?  @relation(fields: [recordId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  recordId  Int?
  vendor    Vendor?  @relation(fields: [vendorId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  vendorId  Int?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  projectId Int?
  partner   Partner? @relation(fields: [partnerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  partnerId Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  userId    Int?

  @@index([recordId])
  @@index([vendorId])
  @@index([projectId])
  @@index([partnerId])
  @@index([userId])
}
